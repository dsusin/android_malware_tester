#!/usr/bin/perl

use strict;
use warnings;
use threads;
use Acme::Spinner;
use File::Find::Rule;
use File::Path qw(make_path);
use File::Copy;
use POSIX qw(strftime);
use Data::Dumper;

sub logmsg{
	my $msg=shift;

#	my $now=localtime;
	my $now = strftime "%Y-%m-%d %H:%M:%S", localtime;
	print "[$now] $msg\n";
}

sub waitForRecovery{
	my $adbDev=shift;

	my $res=`$adbDev devices`;
	while($res!~/recovery/){
		sleep(5);
		$res=`$adbDev devices`;
		if($res=~/device$/m){
			`$adbDev reboot recovery`;
		}
	}
}

sub waitForRegular{
	my $adbDev=shift;

	my $res=`$adbDev devices`;
	while($res!~/device$/m){
		sleep(5);
		$res=`$adbDev devices`;
		if($res=~/recovery/){
			`$adbDev reboot`;
		}
	}
}

sub acceptVpn{
	my $adbDev=shift;

	`$adbDev shell sendevent /dev/input/event2 0003 57 0`;
	`$adbDev shell sendevent /dev/input/event2 0003 50 10`;
	`$adbDev shell sendevent /dev/input/event2 0003 53 131`;
	`$adbDev shell sendevent /dev/input/event2 0003 54 916`;
	`$adbDev shell sendevent /dev/input/event2 0003 48 14`;
	`$adbDev shell sendevent /dev/input/event2 0003 49 12`;
	`$adbDev shell sendevent /dev/input/event2 0003 60 90`;
	`$adbDev shell sendevent /dev/input/event2 0000 0 0`;
	`$adbDev shell sendevent /dev/input/event2 0003 57 4294967295`;
	`$adbDev shell sendevent /dev/input/event2 0000 0 0`;

	sleep(2);

	`$adbDev shell sendevent /dev/input/event2 0003 57 1`;
	`$adbDev shell sendevent /dev/input/event2 0003 53 532`;
	`$adbDev shell sendevent /dev/input/event2 0003 54 1048`;
	`$adbDev shell sendevent /dev/input/event2 0003 48 15`;
	`$adbDev shell sendevent /dev/input/event2 0003 49 13`;
	`$adbDev shell sendevent /dev/input/event2 0003 60 4294967236`;
	`$adbDev shell sendevent /dev/input/event2 0000 0 0`;
	`$adbDev shell sendevent /dev/input/event2 0003 57 4294967295`;
	`$adbDev shell sendevent /dev/input/event2 0000 0 0`;

	sleep(10);
}

sub dumpRecScript{
	my $openRecoveryScriptPath=shift;
	my $backupPath=shift;
	open my $fh, ">", $openRecoveryScriptPath or die $!;

	print $fh "wipe cache\n";
	print $fh "wipe dalvik\n";
	print $fh "wipe data\n";
	print $fh "restore $backupPath\n";

	close $fh;
}

my $spinner = Acme::Spinner->new();
my $malwareExecTime=240;
#path to adb tool
my $adbPath='/home/dsusin/Programs/adt/sdk/platform-tools/adb';

#temporary file for batch script
my $openRecoveryScriptPath='/tmp/openrecoveryscript';

#path of backup in the phone filesystem
#my $remoteBackupOrigin="/sdcard/TWRP/BACKUPS/4df16c8516654f5f/ovpnonbackup";
my $remoteBackupOrigin="/sdcard/TWRP/BACKUPS/4df16c8516654f5f/regular_backup";

#path with apk files to test
my $apkFolder='apk';
my $processedFolder=$apkFolder."/processed/";


#apks paths array
my @apks=File::Find::Rule->file()->name('*.apk')->maxdepth(1)->in($apkFolder);
@apks=sort {$b cmp $a} @apks;

my $res=`$adbPath devices`;

my @devices;
while($res=~/^(\w+)\s+device$/igm){
    push @devices, $1;
}

foreach my $dev (@devices){
	print "Device $dev \n";

	my $adbDev=$adbPath." -s $dev";

	#for every apk in apk folder
	for my $apkFile(@apks){
		`kdialog --msgbox "Before installing check Wifi"`;
		print "------------------------------------\n";
		#install apk
		logmsg "Installing $apkFile";
		my $res=`$adbDev install $apkFile`;

		#wait
		logmsg "Let it do bad things...";
		sleep($malwareExecTime);
		
		#move apk to "processed"
		if(!-d $processedFolder){
			if(-e $processedFolder){
				logmsg "$processedFolder exists but it is not a folder";
				exit -1;
			}
			logmsg("Creating directory: $processedFolder");
			make_path($processedFolder);
		}
		move($apkFile, $processedFolder);

		#reboot recovery
		logmsg "Ok, enough, rebooting into recovery...";
		`$adbDev reboot recovery`;
		
		#wait for recovery
		waitForRecovery($adbDev);
		logmsg "In recovery";
		
		#push recovery script
		dumpRecScript($openRecoveryScriptPath, $remoteBackupOrigin);
		`$adbDev push $openRecoveryScriptPath /cache/recovery/openrecoveryscript`;
		logmsg "Recovery script pushed in /cache/recovery/openrecoveryscript";

		#reboot recovery
		logmsg "Rebooting and executing wipe & restore script...";
		`$adbDev reboot recovery`;

		#wait for regular reboot
		sleep(230);
		waitForRegular($adbDev);
		logmsg "Rebooted";

		#vpn disabled
#		acceptVpn($adbDev);
	}
}

print "\n------------------------------------\n\n";
print "Done!\n\n";

